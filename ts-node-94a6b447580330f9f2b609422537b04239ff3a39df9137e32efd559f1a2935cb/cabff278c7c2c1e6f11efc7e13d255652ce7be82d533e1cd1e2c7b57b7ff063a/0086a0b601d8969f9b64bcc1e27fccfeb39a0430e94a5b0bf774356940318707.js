"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sequelize = require("sequelize");
exports.UserFoot = {
    id: {
        type: Sequelize.INTEGER(16),
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    userId: {
        type: Sequelize.INTEGER(16),
        field: 'user_id',
    },
    shoeId: {
        type: Sequelize.INTEGER(16),
        field: 'shoe_id',
    },
    shoeSize: {
        type: Sequelize.TEXT(),
        field: 'shoe_size',
    },
    useState: {
        type: Sequelize.INTEGER(1),
        field: 'use_state',
    },
};
exports.UserFootConfig = {
    freezeTableName: true,
    tableName: 'user_foot',
    timestamps: true,
    underscored: true,
    hooks: {
        afterFind: (user_foots) => {
            if (Array.isArray(user_foots)) {
                for (const user_foot of user_foots) {
                    user_foot.shoeSize = user_foot.shoeSize ? JSON.parse(user_foot.shoeSize) : undefined;
                }
            }
            else {
                const user_foot = user_foots;
                user_foot.shoeSize = user_foot.shoeSize ? JSON.parse(user_foot.shoeSize) : user_foot.shoeSize;
            }
        },
        beforeCreate: (user_foot) => {
            user_foot.shoeSize = typeof user_foot.shoeSize === 'string' ? user_foot.shoeSize : JSON.stringify(user_foot.shoeSize);
        },
        beforeBulkCreate: (user_foots) => {
            for (const user_foot of user_foots) {
                user_foot.shoeSize = typeof user_foot.shoeSize === 'string' ? user_foot.shoeSize : JSON.stringify(user_foot.shoeSize);
            }
        },
        beforeUpdate: (user_foot) => {
            user_foot.shoeSize = typeof user_foot.shoeSize === 'string' ? user_foot.shoeSize : JSON.stringify(user_foot.shoeSize);
        },
        beforeBulkUpdate: (user_foots) => {
            for (const user_foot of user_foots) {
                user_foot.shoeSize = typeof user_foot.shoeSize === 'string' ? user_foot.shoeSize : JSON.stringify(user_foot.shoeSize);
            }
        },
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9jL1dlYi9hdmF0YXIvc3JjL21vZGVscy9lbnRpdGllcy91c2Vycy91c2VyLmZvb3QudHMiLCJzb3VyY2VzIjpbIi9tbnQvYy9XZWIvYXZhdGFyL3NyYy9tb2RlbHMvZW50aXRpZXMvdXNlcnMvdXNlci5mb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdUNBQXVDO0FBd0IxQixRQUFBLFFBQVEsR0FBRztJQUNwQixFQUFFLEVBQUU7UUFDQSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0IsYUFBYSxFQUFFLElBQUk7UUFDbkIsVUFBVSxFQUFFLElBQUk7UUFDaEIsU0FBUyxFQUFFLEtBQUs7UUFDaEIsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNELE1BQU0sRUFBRTtRQUNKLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQixLQUFLLEVBQUUsU0FBUztLQUNuQjtJQUNELE1BQU0sRUFBRTtRQUNKLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQixLQUFLLEVBQUUsU0FBUztLQUNuQjtJQUNELFFBQVEsRUFBRTtRQUNOLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFO1FBQ3RCLEtBQUssRUFBRSxXQUFXO0tBQ3JCO0lBQ0QsUUFBUSxFQUFFO1FBQ04sSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEtBQUssRUFBRSxXQUFXO0tBQ3JCO0NBQ0osQ0FBQztBQUNXLFFBQUEsY0FBYyxHQUFnQjtJQUN2QyxlQUFlLEVBQUUsSUFBSTtJQUNyQixTQUFTLEVBQUUsV0FBVztJQUN0QixVQUFVLEVBQUUsSUFBSTtJQUNoQixXQUFXLEVBQUUsSUFBSTtJQUNqQixLQUFLLEVBQUU7UUFDSCxTQUFTLEVBQUUsQ0FBQyxVQUFtQyxFQUFFLEVBQUU7WUFDL0MsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQ25HLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDO2dCQUM3QixTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUM1RyxDQUFDO1FBQ0wsQ0FBQztRQUNELFlBQVksRUFBRSxDQUFDLFNBQW9CLEVBQUUsRUFBRTtZQUNuQyxTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sU0FBUyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFILENBQUM7UUFDRCxnQkFBZ0IsRUFBRSxDQUFDLFVBQXVCLEVBQUUsRUFBRTtZQUMxQyxHQUFHLENBQUMsQ0FBQyxNQUFNLFNBQVMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sU0FBUyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFILENBQUM7UUFDTCxDQUFDO1FBQ0QsWUFBWSxFQUFFLENBQUMsU0FBb0IsRUFBRSxFQUFFO1lBQ25DLFNBQVMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxTQUFTLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUgsQ0FBQztRQUNELGdCQUFnQixFQUFFLENBQUMsVUFBdUIsRUFBRSxFQUFFO1lBQzFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxTQUFTLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUgsQ0FBQztRQUNMLENBQUM7S0FDSjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb29sLCBNb2RlbENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvdHlwZSc7XG5pbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IElCYXNlIH0gZnJvbSAnLi4vYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXJGb290IGV4dGVuZHMgSUJhc2Uge1xuICAgIGlkPzogbnVtYmVyO1xuICAgIHVzZXJJZD86IG51bWJlcjtcbiAgICBzaG9lSWQ/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICog5bC656CB5LusXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICogQG1lbWJlcm9mIElVc2VyRm9vdFxuICAgICAqL1xuICAgIHNob2VTaXplPzogbnVtYmVyW10gfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICog5piv5ZCm5LiN6IO95L2/55SoXG4gICAgICog5Zug5Li6IOmcgOimgea0l+aIluiAheaZkuW5suaIluiAheWHhuWkh+a0lywg5a+86Ie05LiN6IO956m/552AXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBJVXNlckZvb3RcbiAgICAgKi9cbiAgICB1c2VTdGF0ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IFVzZXJGb290ID0ge1xuICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5JTlRFR0VSKDE2KSxcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxuICAgIH0sXG4gICAgdXNlcklkOiB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5JTlRFR0VSKDE2KSxcbiAgICAgICAgZmllbGQ6ICd1c2VyX2lkJyxcbiAgICB9LFxuICAgIHNob2VJZDoge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuSU5URUdFUigxNiksXG4gICAgICAgIGZpZWxkOiAnc2hvZV9pZCcsXG4gICAgfSxcbiAgICBzaG9lU2l6ZToge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuVEVYVCgpLFxuICAgICAgICBmaWVsZDogJ3Nob2Vfc2l6ZScsXG4gICAgfSxcbiAgICB1c2VTdGF0ZToge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuSU5URUdFUigxKSxcbiAgICAgICAgZmllbGQ6ICd1c2Vfc3RhdGUnLFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFVzZXJGb290Q29uZmlnOiBNb2RlbENvbmZpZyA9IHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gICAgdGFibGVOYW1lOiAndXNlcl9mb290JyxcbiAgICB0aW1lc3RhbXBzOiB0cnVlLFxuICAgIHVuZGVyc2NvcmVkOiB0cnVlLFxuICAgIGhvb2tzOiB7XG4gICAgICAgIGFmdGVyRmluZDogKHVzZXJfZm9vdHM6IElVc2VyRm9vdCB8IElVc2VyRm9vdFtdKSA9PiB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh1c2VyX2Zvb3RzKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXNlcl9mb290IG9mIHVzZXJfZm9vdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9mb290LnNob2VTaXplID0gdXNlcl9mb290LnNob2VTaXplID8gSlNPTi5wYXJzZSh1c2VyX2Zvb3Quc2hvZVNpemUgYXMgc3RyaW5nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJfZm9vdCA9IHVzZXJfZm9vdHM7XG4gICAgICAgICAgICAgICAgdXNlcl9mb290LnNob2VTaXplID0gdXNlcl9mb290LnNob2VTaXplID8gSlNPTi5wYXJzZSh1c2VyX2Zvb3Quc2hvZVNpemUgYXMgc3RyaW5nKSA6IHVzZXJfZm9vdC5zaG9lU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlQ3JlYXRlOiAodXNlcl9mb290OiBJVXNlckZvb3QpID0+IHtcbiAgICAgICAgICAgIHVzZXJfZm9vdC5zaG9lU2l6ZSA9IHR5cGVvZiB1c2VyX2Zvb3Quc2hvZVNpemUgPT09ICdzdHJpbmcnID8gdXNlcl9mb290LnNob2VTaXplIDogSlNPTi5zdHJpbmdpZnkodXNlcl9mb290LnNob2VTaXplKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlQnVsa0NyZWF0ZTogKHVzZXJfZm9vdHM6IElVc2VyRm9vdFtdKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVzZXJfZm9vdCBvZiB1c2VyX2Zvb3RzKSB7XG4gICAgICAgICAgICAgICAgdXNlcl9mb290LnNob2VTaXplID0gdHlwZW9mIHVzZXJfZm9vdC5zaG9lU2l6ZSA9PT0gJ3N0cmluZycgPyB1c2VyX2Zvb3Quc2hvZVNpemUgOiBKU09OLnN0cmluZ2lmeSh1c2VyX2Zvb3Quc2hvZVNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVVcGRhdGU6ICh1c2VyX2Zvb3Q6IElVc2VyRm9vdCkgPT4ge1xuICAgICAgICAgICAgdXNlcl9mb290LnNob2VTaXplID0gdHlwZW9mIHVzZXJfZm9vdC5zaG9lU2l6ZSA9PT0gJ3N0cmluZycgPyB1c2VyX2Zvb3Quc2hvZVNpemUgOiBKU09OLnN0cmluZ2lmeSh1c2VyX2Zvb3Quc2hvZVNpemUpO1xuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVCdWxrVXBkYXRlOiAodXNlcl9mb290czogSVVzZXJGb290W10pID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXNlcl9mb290IG9mIHVzZXJfZm9vdHMpIHtcbiAgICAgICAgICAgICAgICB1c2VyX2Zvb3Quc2hvZVNpemUgPSB0eXBlb2YgdXNlcl9mb290LnNob2VTaXplID09PSAnc3RyaW5nJyA/IHVzZXJfZm9vdC5zaG9lU2l6ZSA6IEpTT04uc3RyaW5naWZ5KHVzZXJfZm9vdC5zaG9lU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbn07Il19