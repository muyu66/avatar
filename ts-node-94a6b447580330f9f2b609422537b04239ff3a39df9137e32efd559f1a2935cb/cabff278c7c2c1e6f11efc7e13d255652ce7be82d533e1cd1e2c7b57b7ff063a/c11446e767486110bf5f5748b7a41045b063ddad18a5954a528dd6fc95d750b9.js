"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sequelize = require("sequelize");
exports.Shoe = {
    id: {
        type: Sequelize.INTEGER(16),
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    name: {
        type: Sequelize.STRING(100),
    },
    marketDate: {
        type: Sequelize.DATEONLY,
        field: 'martet_date',
    },
    heelHeight: {
        type: Sequelize.INTEGER(2),
        field: 'heel_height',
    },
    logo: {
        type: Sequelize.STRING(100),
    },
    toeStyle: {
        type: Sequelize.STRING(100),
        field: 'toe_style',
    },
    style: {
        type: Sequelize.STRING(100),
    },
    season: {
        type: Sequelize.INTEGER(1),
    },
    colors: {
        type: Sequelize.TEXT(),
    },
};
exports.ShoeConfig = {
    freezeTableName: true,
    tableName: 'shoe',
    timestamps: true,
    underscored: true,
    hooks: {
        afterFind: (shoes) => {
            if (Array.isArray(shoes)) {
                for (const shoe of shoes) {
                    shoe.colors = shoe.colors ? JSON.parse(shoe.colors) : undefined;
                }
            }
            else {
                const shoe = shoes;
                shoe.colors = shoe.colors ? JSON.parse(shoe.colors) : shoe.colors;
            }
        },
        beforeCreate: (shoe) => {
            shoe.colors = typeof shoe.colors === 'string' ? shoe.colors : JSON.stringify(shoe.colors);
        },
        beforeBulkCreate: (shoes) => {
            for (const shoe of shoes) {
                shoe.colors = typeof shoe.colors === 'string' ? shoe.colors : JSON.stringify(shoe.colors);
            }
        },
        beforeUpdate: (shoe) => {
            shoe.colors = typeof shoe.colors === 'string' ? shoe.colors : JSON.stringify(shoe.colors);
        },
        beforeBulkUpdate: (shoes) => {
            for (const shoe of shoes) {
                shoe.colors = typeof shoe.colors === 'string' ? shoe.colors : JSON.stringify(shoe.colors);
            }
        },
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9jL1dlYi9hdmF0YXIvc3JjL21vZGVscy9lbnRpdGllcy9lcXVpcG1lbnRzL3Nob2UudHMiLCJzb3VyY2VzIjpbIi9tbnQvYy9XZWIvYXZhdGFyL3NyYy9tb2RlbHMvZW50aXRpZXMvZXF1aXBtZW50cy9zaG9lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdUNBQXVDO0FBd0MxQixRQUFBLElBQUksR0FBRztJQUNoQixFQUFFLEVBQUU7UUFDQSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0IsYUFBYSxFQUFFLElBQUk7UUFDbkIsVUFBVSxFQUFFLElBQUk7UUFDaEIsU0FBUyxFQUFFLEtBQUs7UUFDaEIsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNELElBQUksRUFBRTtRQUNGLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUM5QjtJQUNELFVBQVUsRUFBRTtRQUNSLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUTtRQUN4QixLQUFLLEVBQUUsYUFBYTtLQUN2QjtJQUNELFVBQVUsRUFBRTtRQUNSLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxQixLQUFLLEVBQUUsYUFBYTtLQUN2QjtJQUNELElBQUksRUFBRTtRQUNGLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUM5QjtJQUNELFFBQVEsRUFBRTtRQUNOLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMzQixLQUFLLEVBQUUsV0FBVztLQUNyQjtJQUNELEtBQUssRUFBRTtRQUNILElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUM5QjtJQUNELE1BQU0sRUFBRTtRQUNKLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUNELE1BQU0sRUFBRTtRQUNKLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFO0tBQ3pCO0NBQ0osQ0FBQztBQUNXLFFBQUEsVUFBVSxHQUFnQjtJQUNuQyxlQUFlLEVBQUUsSUFBSTtJQUNyQixTQUFTLEVBQUUsTUFBTTtJQUNqQixVQUFVLEVBQUUsSUFBSTtJQUNoQixXQUFXLEVBQUUsSUFBSTtJQUNqQixLQUFLLEVBQUU7UUFDSCxTQUFTLEVBQUUsQ0FBQyxLQUFzQixFQUFFLEVBQUU7WUFDbEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQzlFLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoRixDQUFDO1FBQ0wsQ0FBQztRQUNELFlBQVksRUFBRSxDQUFDLElBQVcsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUNELGdCQUFnQixFQUFFLENBQUMsS0FBYyxFQUFFLEVBQUU7WUFDakMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RixDQUFDO1FBQ0wsQ0FBQztRQUNELFlBQVksRUFBRSxDQUFDLElBQVcsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUNELGdCQUFnQixFQUFFLENBQUMsS0FBYyxFQUFFLEVBQUU7WUFDakMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RixDQUFDO1FBQ0wsQ0FBQztLQUNKO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2wsIE1vZGVsQ29uZmlnLCBTZWFzb24sIENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy90eXBlJztcbmltcG9ydCAqIGFzIFNlcXVlbGl6ZSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgSUJhc2UgfSBmcm9tICcuLi9iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBJU2hvZSBleHRlbmRzIElCYXNlIHtcbiAgICBpZD86IG51bWJlcjtcbiAgICBtYXJrZXREYXRlPzogRGF0ZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIG1hdGVyaWFsPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIOmei+i3n+mrmFxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgSVNob2VcbiAgICAgKi9cbiAgICBoZWVsSGVpZ2h0PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIOWTgeeJjFxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgSVNob2VcbiAgICAgKi9cbiAgICBsb2dvPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIOmei+WktOasvuW8j1xuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgSVNob2VcbiAgICAgKi9cbiAgICB0b2VTdHlsZT86IHN0cmluZztcbiAgICBzdHlsZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiDlraPoioJcbiAgICAgKlxuICAgICAqIEB0eXBlIHtTZWFzb259XG4gICAgICogQG1lbWJlcm9mIElTaG9lXG4gICAgICovXG4gICAgc2Vhc29uPzogU2Vhc29uO1xuICAgIGNvbG9ycz86IENvbG9yW10gfCBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBTaG9lID0ge1xuICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5JTlRFR0VSKDE2KSxcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxuICAgIH0sXG4gICAgbmFtZToge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HKDEwMCksXG4gICAgfSxcbiAgICBtYXJrZXREYXRlOiB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5EQVRFT05MWSxcbiAgICAgICAgZmllbGQ6ICdtYXJ0ZXRfZGF0ZScsXG4gICAgfSxcbiAgICBoZWVsSGVpZ2h0OiB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5JTlRFR0VSKDIpLFxuICAgICAgICBmaWVsZDogJ2hlZWxfaGVpZ2h0JyxcbiAgICB9LFxuICAgIGxvZ286IHtcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLlNUUklORygxMDApLFxuICAgIH0sXG4gICAgdG9lU3R5bGU6IHtcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLlNUUklORygxMDApLFxuICAgICAgICBmaWVsZDogJ3RvZV9zdHlsZScsXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HKDEwMCksXG4gICAgfSxcbiAgICBzZWFzb246IHtcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLklOVEVHRVIoMSksXG4gICAgfSxcbiAgICBjb2xvcnM6IHtcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLlRFWFQoKSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTaG9lQ29uZmlnOiBNb2RlbENvbmZpZyA9IHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gICAgdGFibGVOYW1lOiAnc2hvZScsXG4gICAgdGltZXN0YW1wczogdHJ1ZSxcbiAgICB1bmRlcnNjb3JlZDogdHJ1ZSxcbiAgICBob29rczoge1xuICAgICAgICBhZnRlckZpbmQ6IChzaG9lczogSVNob2UgfCBJU2hvZVtdKSA9PiB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzaG9lcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNob2Ugb2Ygc2hvZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvZS5jb2xvcnMgPSBzaG9lLmNvbG9ycyA/IEpTT04ucGFyc2Uoc2hvZS5jb2xvcnMgYXMgc3RyaW5nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob2UgPSBzaG9lcztcbiAgICAgICAgICAgICAgICBzaG9lLmNvbG9ycyA9IHNob2UuY29sb3JzID8gSlNPTi5wYXJzZShzaG9lLmNvbG9ycyBhcyBzdHJpbmcpIDogc2hvZS5jb2xvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGJlZm9yZUNyZWF0ZTogKHNob2U6IElTaG9lKSA9PiB7XG4gICAgICAgICAgICBzaG9lLmNvbG9ycyA9IHR5cGVvZiBzaG9lLmNvbG9ycyA9PT0gJ3N0cmluZycgPyBzaG9lLmNvbG9ycyA6IEpTT04uc3RyaW5naWZ5KHNob2UuY29sb3JzKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlQnVsa0NyZWF0ZTogKHNob2VzOiBJU2hvZVtdKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNob2Ugb2Ygc2hvZXMpIHtcbiAgICAgICAgICAgICAgICBzaG9lLmNvbG9ycyA9IHR5cGVvZiBzaG9lLmNvbG9ycyA9PT0gJ3N0cmluZycgPyBzaG9lLmNvbG9ycyA6IEpTT04uc3RyaW5naWZ5KHNob2UuY29sb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlVXBkYXRlOiAoc2hvZTogSVNob2UpID0+IHtcbiAgICAgICAgICAgIHNob2UuY29sb3JzID0gdHlwZW9mIHNob2UuY29sb3JzID09PSAnc3RyaW5nJyA/IHNob2UuY29sb3JzIDogSlNPTi5zdHJpbmdpZnkoc2hvZS5jb2xvcnMpO1xuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVCdWxrVXBkYXRlOiAoc2hvZXM6IElTaG9lW10pID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2hvZSBvZiBzaG9lcykge1xuICAgICAgICAgICAgICAgIHNob2UuY29sb3JzID0gdHlwZW9mIHNob2UuY29sb3JzID09PSAnc3RyaW5nJyA/IHNob2UuY29sb3JzIDogSlNPTi5zdHJpbmdpZnkoc2hvZS5jb2xvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG59OyJdfQ==